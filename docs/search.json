[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AB322 Land-2-Sea Tutorial",
    "section": "",
    "text": "UNIS course AB-322 is titled “Fluxes of Nutrients, Energy and Contaminants from Sea to Land”, but equally important are fluxes moving in the opposite direction: from land to sea.\nHere, we have compiled an R tutorial focused on 5 Arctic rivers and their role in transporting nutrients, carbon and contaminants from thawing watersheds to coastal waters in Isfjorden, Svalbard.\n\n\nThis tutorial requires you to have R and Rstudio installed on your computer. Go to the R website and follow the links for downloading.\nR for Windows: https://cran.r-project.org/bin/windows/base/.\nR for Macs: https://cran.r-project.org/bin/macosx/.\nR-studio: https://www.rstudio.com/products/rstudio/download/\nOnce you have Rstudio installed, click on File/New File/Rscript. We will use this new Rscript file for loading, cleaning and plotting catchment and river water chemistry data throughout this tutorial.\n\n\n\nIn addition, you will need to install several R packages. You can do this by copying and running the following lines of code in your new Rscript.\n# Packages for data preparation and plotting\ninstall.packages(“tidyverse”)\ninstall.packages(“lubridate”)\ninstall.packages(“vegan”)\n\n# Packages for spatial data analysis\ninstall.packages(“sf”)\ninstall.packages(“terra”)\ninstall.packages(“units”)\ninstall.packages(“raster”)\ninstall.packages(“rgeos”)\ninstall.packages(“tmap”)"
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Preface",
    "section": "",
    "text": "Climate change impacts on cross-ecosystem transport of solutes from Arctic watersheds to coastal areas is driven both by changes in discharge, and in water chemistry. Discharge is increasing for many Arctic rivers due to increases in precipitation, glacial melt and permafrost thaw (Shiklomanov et al. 2021). In addition, receding glaciers and increased vegetative biomass ‘Arctic Greening’, are leading to changes in river water chemistry, with implications for receiving coastal waters (Wrona et al. 2016).\nIn this tutorial, we will explore two cross-boundary fluxes of carbon, nutrients and contaminants: (1) from watershed soils to rivers, and (2) from rivers to sea.\n\n\n\n\n\n\nWater chemistry data used in this tutorial include published data (McGovern et al. 2020) and generated data for teaching purposes. This tutorial was created using Quarto.\n\n\n\n\n\n\n\nCoch, Caroline, Scott F Lamoureux, Christian Knoblauch, Isabell Eischeid, Michael Fritz, Jaroslav Obu, and Hugues Lantuit. 2018. “Summer Rainfall Dissolved Organic Carbon, Solute, and Sediment Fluxes in a Small Arctic Coastal Catchment on Herschel Island (Yukon Territory, Canada).” Arctic Science 4 (4): 750–80.\n\n\nGiesbrecht, Ian JW, Suzanne E Tank, Gordon W Frazer, Eran Hood, Santiago G Gonzalez Arriola, David E Butman, David V D’Amore, David Hutchinson, Allison Bidlack, and Ken P Lertzman. 2022. “Watershed Classification Predicts Streamflow Regime and Organic Carbon Dynamics in the Northeast Pacific Coastal Temperate Rainforest.” Global Biogeochemical Cycles 36 (2): e2021GB007047.\n\n\nHalbach, Laura, Mikko Vihtakari, Pedro Duarte, Alistair Everett, Mats A Granskog, Haakon Hop, Hanna M Kauko, et al. 2019. “Tidewater Glaciers and Bedrock Characteristics Control the Phytoplankton Growth Environment in a Fjord in the Arctic.” Frontiers in Marine Science 6: 254.\n\n\nHuser, Brian J, Martyn N Futter, Daniel Bogan, John E Brittain, Joseph M Culp, Willem Goedkoop, Iliada Gribovskaya, et al. 2022. “Spatial and Temporal Variation in Arctic Freshwater Chemistry—Reflecting Climate-Induced Landscape Alterations and a Changing Template for Biodiversity.” Freshwater Biology 67 (1): 14–29.\n\n\nMcGovern, Maeve, Alexey K Pavlov, Anne Deininger, Mats A Granskog, Eva Leu, Janne E Søreide, and Amanda E Poste. 2020. “Terrestrial Inputs Drive Seasonality in Organic Matter and Nutrient Biogeochemistry in a High Arctic Fjord System (Isfjorden, Svalbard).” Frontiers in Marine Science 7: 542563.\n\n\nShiklomanov, Alexander, Stephen Déry, Mikhail Tretiakov, Daqing Yang, Dmitry Magritsky, Alex Georgiadi, and Wenqing Tang. 2021. “River Freshwater Flux to the Arctic Ocean.” In Arctic Hydrology, Permafrost and Ecosystems, 703–38. Springer.\n\n\nWrona, Frederick J, Margareta Johansson, Joseph M Culp, Alan Jenkins, Johanna Mård, Isla H Myers-Smith, Terry D Prowse, Warwick F Vincent, and Philip A Wookey. 2016. “Transitions in Arctic Ecosystems: Ecological Implications of a Changing Hydrological Regime.” Journal of Geophysical Research: Biogeosciences 121 (3): 650–74."
  },
  {
    "objectID": "preface.html#ackowledgements",
    "href": "preface.html#ackowledgements",
    "title": "Preface",
    "section": "Ackowledgements",
    "text": "Ackowledgements\nWater chemistry data used in this tutorial include published data (McGovern et al., 2020) and unpublished data collected by NIVA under the NFR project ’TerrACE’and Framcenter project “FreshFate”; PI, Amanda Poste. In addition, some of the data used here are generated for teaching purposes."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "The rivers investigated in this tutorial include Adventelva, Sassenelva, DeGeerelva, Gipsdalselva and Ebbaelva. These rivers drain watersheds with varying morphology and vegetation cover and all flow into the Isfjorden system on the west coast of Svalbard."
  },
  {
    "objectID": "catchment_characteristics.html",
    "href": "catchment_characteristics.html",
    "title": "2  Catchment Characteristics",
    "section": "",
    "text": "Note\n\n\n\nHere, we define a catchment (catchment basin, watershed, nedbørfelt) as the area from which rainfall flows into a river, lake, or reservoir."
  },
  {
    "objectID": "river_chemistry.html",
    "href": "river_chemistry.html",
    "title": "1  River Water Chemistry",
    "section": "",
    "text": "# Packages for data preparation and plotting\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(vegan)"
  },
  {
    "objectID": "river_chemistry.html#solute-concentrations",
    "href": "river_chemistry.html#solute-concentrations",
    "title": "1  River water chemistry",
    "section": "1.1 Solute Concentrations",
    "text": "1.1 Solute Concentrations\n\n# Load libraries\nlibrary(tidyverse)\n\n# Load datafiles\nWater_Chem <- read_csv(\"Datafiles/AB322_Water_Chemistry.csv\")\n\n# Arrange Month factor chronologically\nWater_Chem$Month <- factor(Water_Chem$Month,levels = c(\"May\", \"June\", \"August\"))\n\n\n1.1.1 Carbon\n\n# TOC, DOC, POC\n\nP1 <- Water_Chem %>% \n  select(River, Month, DOC, TOC, POC) %>% \n  pivot_longer(cols= -c(River, Month), names_to = \"Carbon\", values_to= 'Concentration') %>% \n  ggplot(aes(x = Month, y = Concentration, color = Month)) + \n  geom_boxplot() +\n  scale_color_manual(values=c(\"cornflowerblue\",\"tan\",\"lightsalmon4\")) +\n  facet_grid(Carbon~River, scales= \"free\") +\n  ylab(\"Organic Carbon (umol/L)\") + \n  xlab(\"River\") +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), text = element_text(size=14))\n\nP1\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nShortcut for the pipe (%>%): shift-command-m (mac); shift-control-m (windows)\n\n\n\n\n1.1.2 Nutrients\n\n# NO3_NO2, SiO2, PO4\n\nP2 <- Water_Chem %>% \n  select(River, Month, NO2_NO3, SiO2, PO4) %>% \n  pivot_longer(cols= -c(River, Month), names_to = \"Nutrient\", values_to= 'Concentration') %>% \n  ggplot(aes(x = Month, y = Concentration, color = Month)) + \n  geom_boxplot() +\n  scale_color_manual(values=c(\"cornflowerblue\",\"tan\",\"lightsalmon4\")) +\n  facet_grid(Nutrient ~ River, scales = \"free\") +\n  ylab(\"Concentration (umol/L)\") + \n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), text = element_text(size=14))\n\nP2\n\n\n\n\n\n\n1.1.3 Contaminants\n\n# Hg (Particulate and dissolved)\n\nP3 <- Water_Chem %>% \n  select(River, Month, TotHg_Dissolved, TotHg_Particulate) %>% \n  pivot_longer(cols= -c(River, Month), names_to = \"Mercury\", values_to= 'Concentration') %>% \n  ggplot(aes(x = Month, y = Concentration, color = Month)) + \n  geom_boxplot() +\n  scale_color_manual(values=c(\"cornflowerblue\",\"tan\",\"lightsalmon4\")) +\n  facet_grid(Mercury ~ River, scales = \"free\") +\n  ylab(\"Concentration (ug/L)\") + \n  xlab(\"River\") +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), text = element_text(size=14))\n\nP3\n\n\n\n\n\n# Hg per gram Carbon\n\nP4 <- Water_Chem %>% \n  select(River, Month, TotHg_g_DOC, TotHg_g_POC) %>% \n  pivot_longer(cols= -c(River, Month), names_to = \"Mercury\", values_to= 'Concentration') %>% \n  ggplot(aes(x = Month, y = Concentration, color = Month)) + \n  geom_boxplot() +\n  scale_color_manual(values=c(\"cornflowerblue\",\"tan\",\"lightsalmon4\")) +\n  facet_grid(Mercury ~ River, scales = \"free\") +\n  ylab(\"Concentration (mg/gC)\") + \n  xlab(\"River\") +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), text = element_text(size=14))\n\nP4\n\n\n\n\n\n\n\nNote\n\n\n\nFluxes, rather than concentration data are more relevant for evaluating implications on coastal ecosystems and the Arctic ocean. Fluxes are calculated using concentrations and discharge."
  },
  {
    "objectID": "climate_change_impacts.html",
    "href": "climate_change_impacts.html",
    "title": "4  Climate Change Impacts",
    "section": "",
    "text": "Climate variables:\n\nGlacier coverage\nNDVI (greening)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn Arctic regions, most river runoff is constrained to the summer melt season due to seasonal variations in sunlight and temperature. Despite their importance, for simplification, we do not account for seasonal variability in river discharge and water chemistry in this example."
  },
  {
    "objectID": "catchment_comparison.html",
    "href": "catchment_comparison.html",
    "title": "3  Catchment Comparison",
    "section": "",
    "text": "Now, we will combine data on catchment characteristics and river water chemistry to investigate differences among the 5 study catchments."
  },
  {
    "objectID": "catchment_comparison.html#plot-morphology-ground-cover-classes",
    "href": "catchment_comparison.html#plot-morphology-ground-cover-classes",
    "title": "3  Catchment Comparison",
    "section": "3.1 Plot Morphology & Ground cover classes",
    "text": "3.1 Plot Morphology & Ground cover classes\n\n3.1.1 Extracting data\n\n# Ggplots\n\n# Load the watershed files\nwatershed_df <- read_csv(\"datafiles/spatial_data/watershed_dataframe.csv\")\nwatershed_info <- read_csv(\"datafiles/spatial_data/watershed_info.csv\")\n\n# We add a column to watershed_df because it makes summaries easier\n\nwatershed_df$count <- 1\n\n# Summarizing functions\n\nwatershed_mean <- watershed_df %>%\n  group_by(watershed) %>%\n  summarise_at(c(\"ndvi\", \"elevation\", \"slope\"), mean, na.rm = TRUE)\n\n# If your computer is slow, you can subset the data\n\nwatershed_df <- sample_n(watershed_df, 10000)\n\nwatershed_mean <- watershed_df %>%\n  filter(station_distance < 1000) %>%\n  group_by(watershed) %>%\n  summarise_at(c(ndvi_1km=\"ndvi\", elevation_1km=\"elevation\", \n                 slope_1km=\"slope\"), mean, na.rm = TRUE) %>%\n  inner_join(watershed_mean)\n\n\nwatershed_mean<-watershed_df %>%\n  filter(station_distance < 5000) %>%\n  group_by(watershed) %>%\n  summarise_at(c(ndvi_5km=\"ndvi\", elevation_5km=\"elevation\", \n                 slope_5km=\"slope\"), mean, na.rm = TRUE) %>%\n  inner_join(watershed_mean)\n\n \n#Sum the vegetation classes per watershed\nwatershed_class_proportion <- watershed_df %>%\n  group_by(watershed, vegetation) %>%\n  summarise_at(c(\"count\"), sum, na.rm = TRUE) %>%\n  pivot_wider(names_from = 'vegetation', values_from = 'count')\n\n\n# Calculate the percentages per vegetation class and watershed\nwatershed_class_proportion <- watershed_class_proportion %>% \n  mutate(total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>%\n  ungroup() %>%\n  mutate(across(where(is.numeric), ~ . / total*100))\n\n watershed_class_proportion <- watershed_class_proportion %>% \n   dplyr::select(-shadow, -marine, -total)\n\n\n3.1.1.1 Bare ground close to river\n\n#Sum the vegetation classes per watershed\n\nbuffer50_class_proportion <- watershed_df %>%\n  filter(river_buffer50 == \"1\") %>%\n  group_by(watershed, vegetation) %>%\n  summarise_at(c(\"count\"), sum, na.rm = TRUE) %>%\n  pivot_wider(names_from = 'vegetation',values_from = 'count')\n\n# Calculate the percentages per vegetation class and watershed\nbuffer50_class_proportion <- buffer50_class_proportion %>% \n  mutate(total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>%\n  ungroup() %>%\n  mutate(across(where(is.numeric), ~ . / total*100))\n\nbuffer50_bareground <- buffer50_class_proportion %>% \n  dplyr::select(watershed, barren50meter=barren) %>% \n  inner_join(watershed_class_proportion)\n\n \n### Make GGPLOT with proportions\n\n \n# Join tables\nwatershed_info_joined <- inner_join(watershed_class_proportion, watershed_mean)\nwatershed_info_joined <- inner_join(watershed_info_joined, buffer50_bareground)\nwatershed_info_joined <- inner_join(watershed_info_joined, watershed_info)"
  },
  {
    "objectID": "catchment_comparison.html#relationships-to-river-water-chemistry",
    "href": "catchment_comparison.html#relationships-to-river-water-chemistry",
    "title": "3  Catchment Comparison",
    "section": "3.3 Relationships to river water chemistry",
    "text": "3.3 Relationships to river water chemistry\n\n3.3.1 PCA\n\n# PCA of water chemistry \n\nwater_chem2 <- water_chem %>% drop_na() %>% \n  rename(\"DOC\" = \"DOC_mg_L\", \n         \"POC\" = \"POC_mg_L\", \n         \"NO2_NO3\" = \"NO2_NO3_umol_L\", \n         \"PO4\" = \"PO4_umol_L\", \n         \"SiO2\" = \"SiO2_umol_L\", \n         \"SPM\" = \"SPM_mg_L\", \n         \"dTotHg\" = \"dTotHg_ng_L\", \n         \"pTotHg\" = \"pTotHg_ng_L\")\n\nEnvar <- water_chem2 %>% \n  select(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)) %>% \n  mutate_at(vars(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)),~scale(.))\n\n# PCA in Vegan\nwater_chem_PCA <- rda(Envar)\nwater_chem_PCA\n\nCall: rda(X = Envar)\n\n              Inertia Rank\nTotal               8     \nUnconstrained       8    8\nInertia is variance \n\nEigenvalues for unconstrained axes:\n   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 \n3.1505 2.1688 1.1928 0.5890 0.4575 0.2103 0.1660 0.0651 \n\n(3.1505/8)*100\n\n[1] 39.38125\n\n(2.1688/8)*100\n\n[1] 27.11\n\n# Plot\nPCAscores <- scores(water_chem_PCA, display = \"sites\") %>% as.data.frame() \nPCAvect <- scores(water_chem_PCA, display = \"species\") %>% as.data.frame() %>% rownames_to_column(\"species\")\n\n\n#Plot\nP4 <- ggplot() +\n  geom_point(data = PCAscores, aes(x = PC1, y = PC2, color = water_chem$month), \n             size= 3, alpha = 0.7) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) + \n  theme_classic() +\n  geom_vline(xintercept = c(0), color = \"grey70\", linetype = 2) + \n  geom_hline(yintercept = c(0), color = \"grey70\", linetype = 2)  +\n  labs(x = \"PC1 (39 %)\", y = \"PC2 (27%)\") +  \n  geom_segment(data = PCAvect, aes(x = 0, xend = PC1, y = 0, yend = PC2), \n               arrow = arrow(length = unit(0.1, \"cm\")), col = \"black\") +\n  geom_text_repel(data = PCAvect, aes(x = PC1, y= PC2, label = species), parse = T, col=\"black\", size = 3, segment.size = 0.15) +\n  theme(text = element_text(size=),legend.text = element_text(size=rel(0.6)),legend.title = element_blank(), \n        panel.background = element_rect(colour = \"black\", size=1)) + ylim(-1.2,1.2) + xlim(-1.5,1.5)\nP4\n\n\n\n\n\n\n3.3.2 RDA\n\n# PCA of water chemistry \nwater_chem <- water_chem %>% drop_na() %>% \n  rename(\"DOC\" = \"DOC_mg_L\", \n         \"POC\" = \"POC_mg_L\", \n         \"NO2_NO3\" = \"NO2_NO3_umol_L\", \n         \"PO4\" = \"PO4_umol_L\", \n         \"SiO2\" = \"SiO2_umol_L\", \n         \"SPM\" = \"SPM_mg_L\", \n         \"dTotHg\" = \"dTotHg_ng_L\", \n         \"pTotHg\" = \"pTotHg_ng_L\")\n\nEnvar <- water_chem %>% \n  select(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)) %>% \n  mutate_at(vars(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)),~scale(.))\n\n# PCA in Vegan\nwater_chem_PCA <- rda(Envar)\nwater_chem_PCA\n\nCall: rda(X = Envar)\n\n              Inertia Rank\nTotal               8     \nUnconstrained       8    8\nInertia is variance \n\nEigenvalues for unconstrained axes:\n   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 \n3.1505 2.1688 1.1928 0.5890 0.4575 0.2103 0.1660 0.0651 \n\n(3.1505/8)*100\n\n[1] 39.38125\n\n(2.1688/8)*100\n\n[1] 27.11\n\n# Plot\nPCAscores <- scores(water_chem_PCA, display = \"sites\") %>% as.data.frame() \nPCAvect <- scores(water_chem_PCA, display = \"species\") %>% as.data.frame() %>% rownames_to_column(\"species\")\n\n\n#Plot\nP4 <- ggplot() +\n  geom_point(data = PCAscores, aes(x = PC1, y = PC2, color = water_chem$month), \n             size= 3, alpha = 0.7) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) + \n  theme_classic() +\n  geom_vline(xintercept = c(0), color = \"grey70\", linetype = 2) + \n  geom_hline(yintercept = c(0), color = \"grey70\", linetype = 2)  +\n  labs(x = \"PC1 (39 %)\", y = \"PC2 (27%)\") +  \n  geom_segment(data = PCAvect, aes(x = 0, xend = PC1, y = 0, yend = PC2), \n               arrow = arrow(length = unit(0.1, \"cm\")), col = \"black\") +\n  geom_text_repel(data = PCAvect, aes(x = PC1, y= PC2, label = species), parse = T, col=\"black\", size = 3, segment.size = 0.15) +\n  theme(text = element_text(size=),legend.text = element_text(size=rel(0.6)),legend.title = element_blank(), \n        panel.background = element_rect(colour = \"black\", size=1)) + ylim(-1.2,1.2) + xlim(-1.5,1.5)\nP4\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn Arctic regions, most river runoff is constrained to the summer melt season due to seasonal variations in sunlight and temperature. Despite their importance, for simplification, we do not account for seasonal variability in river discharge and water chemistry in this example."
  },
  {
    "objectID": "river_chemistry.html#load-datafiles",
    "href": "river_chemistry.html#load-datafiles",
    "title": "1  River Water Chemistry",
    "section": "1.2 Load datafiles",
    "text": "1.2 Load datafiles\n\n# Load datafile\nwater_chem <- read_csv(\"datafiles/AB322_Water_Chemistry.csv\")"
  },
  {
    "objectID": "river_chemistry.html#data-preparation",
    "href": "river_chemistry.html#data-preparation",
    "title": "1  River Water Chemistry",
    "section": "1.3 Data Preparation",
    "text": "1.3 Data Preparation\n\n\n\n\n\n\nTip\n\n\n\nShortcut for the pipe (%>%): shift-command-m (mac); shift-control-m (windows)\n\n\n\nwater_chem <- water_chem %>% \n  mutate(Date = dmy(Date)) %>%\n  mutate(year = year(Date),month = month(Date, label = TRUE), day = day(Date)) %>% \n  rename(\"DOC\" = \"DOC_mg_L\", \n         \"POC\" = \"POC_mg_L\", \n         \"NO2_NO3\" = \"NO2_NO3_umol_L\", \n         \"PO4\" = \"PO4_umol_L\", \n         \"SiO2\" = \"SiO2_umol_L\", \n         \"SPM\" = \"SPM_mg_L\", \n         \"dTotHg\" = \"dTotHg_ng_L\", \n         \"pTotHg\" = \"pTotHg_ng_L\")\n\n# Arrange month factor chronologically\nwater_chem$month <- factor(water_chem$month, levels = c(\"May\", \"Jun\", \"Aug\", \"Sep\"))"
  },
  {
    "objectID": "river_chemistry.html#explore-water-chemistry-data",
    "href": "river_chemistry.html#explore-water-chemistry-data",
    "title": "1  River Water Chemistry",
    "section": "1.4 Explore water chemistry data",
    "text": "1.4 Explore water chemistry data\n\n1.4.1 Carbon\n\n# TOC, DOC, POC\nP1 <- water_chem %>% \n  dplyr::select(River, month, DOC, POC) %>% \n  pivot_longer(cols= -c(River, month), names_to = \"Carbon\", values_to= 'Concentration') %>% \n  ggplot(aes(x = month, y = Concentration, color = month)) + \n  geom_point(size = 2, aes = 0.8) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) +\n  facet_grid(Carbon~River, scales= \"free\") +\n  ylab(\"Organic carbon (mg C/L)\") + \n  theme_light() +\n  scale_y_log10() + xlab(NULL) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), \n        text = element_text(size=15))\nP1\n\n\n\n\n\n\n1.4.2 Nutrients\n\n# NO3_NO2, SiO2, PO4\n\nP2 <- water_chem %>% \n  dplyr::select(River, month, NO2_NO3, SiO2, PO4) %>% drop_na() %>% \n  pivot_longer(cols= -c(River, month), names_to = \"Nutrient\", values_to= 'Concentration') %>% \n  ggplot(aes(x = month, y = Concentration, color = month)) + \n  geom_point(size = 2, aes= 0.8) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) +\n  facet_grid(Nutrient ~ River, scales = \"free\") +\n  ylab(\"Concentration (umol/L)\") + \n  theme_light() +\n  scale_y_log10() + xlab(NULL) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), \n        text = element_text(size=15))\n\nP2\n\n\n\n\n\n\n1.4.3 Contaminants\n\n# Hg (Particulate and dissolved)\n\nP3 <- water_chem %>% \n  dplyr::select(River, month, dTotHg, pTotHg) %>% drop_na() %>% \n  pivot_longer(cols= -c(River, month), names_to = \"Mercury\", values_to= 'Concentration') %>% \n  ggplot(aes(x = month, y = Concentration, color = month)) + \n  geom_point(size = 2, aes = 0.8) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) +\n  facet_grid(Mercury ~ River, scales = \"free\") +\n  ylab(\"Concentration (ng/L)\") + \n  xlab(\"River\") +\n  theme_light() +\n  scale_y_log10() + xlab(NULL) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), \n        text = element_text(size = 15))\n\nP3\n\n\n\n\n\n# Hg per gram Carbon\n\nP4 <- water_chem %>%\n  mutate(dTotHg_gC = dTotHg/DOC) %>% \n  mutate(pTotHg_gC = pTotHg/POC) %>%\n  dplyr::select(River, month, dTotHg_gC, pTotHg_gC) %>% drop_na() %>% \n  pivot_longer(cols= -c(River, month), names_to = \"Mercury\", values_to= 'Concentration') %>% \n  ggplot(aes(x = month, y = Concentration, color = month)) + \n  geom_point(size = 2, aes = 0.8) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) +\n  facet_grid(Mercury ~ River, scales = \"free\") +\n  ylab(\"Concentration (ng/gC)\") + \n  xlab(\"River\") +\n  theme_light() +\n  scale_y_log10() + xlab(NULL) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), text = element_text(size=15))\n\nP4"
  },
  {
    "objectID": "spatial_analysis.html",
    "href": "spatial_analysis.html",
    "title": "2  Spatial Analysis",
    "section": "",
    "text": "# Load libraries\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(terra)\nlibrary(units)\nlibrary(raster)\nlibrary(rgeos)\nlibrary(tmap)"
  },
  {
    "objectID": "spatial_analysis.html#loading-the-necessary-datasets",
    "href": "spatial_analysis.html#loading-the-necessary-datasets",
    "title": "2  Spatial Analysis",
    "section": "2.1 Loading the necessary datasets",
    "text": "2.1 Loading the necessary datasets\n\n# Load NP datasets\n# Vector data\nwater_f <- read_sf(\"datafiles/spatial_data/S100_Vann_f.shp\")\nwater_l <- read_sf(\"datafiles/spatial_data/S100_Vann_l.shp\")\nglacier <- read_sf(\"datafiles/spatial_data/S100_Isbreer_f.shp\")\nsvalbard <- read_sf(\"datafiles/spatial_data/i_svalbard_outlineS250.shp\")\n\n#Raster data (SpatRast format)\ndem <- rast(\"datafiles/spatial_data/dem_svalbard_center.tif\")\nndvi <- rast(\"datafiles/spatial_data/i_NDVI_average2000_2014.tif\")\nveg_map <- rast(\"datafiles/spatial_data/i_vegetation.tif\")\n\n##Load our watershed info\nwatershed <- read_sf(\"datafiles/spatial_data/watershed5.shp\")\nstations <- read_sf(\"datafiles/spatial_data/sampling_stations.shp\")"
  },
  {
    "objectID": "spatial_analysis.html#plotting-the-data-and-preparing-it-for-analysis",
    "href": "spatial_analysis.html#plotting-the-data-and-preparing-it-for-analysis",
    "title": "2  Spatial Analysis",
    "section": "2.2 Plotting the data and preparing it for analysis",
    "text": "2.2 Plotting the data and preparing it for analysis\n\n2.2.1 PLotting the data\n\n## Exploring the data\n# Plot the watershed with baseR functions\nplot(st_geometry(watershed))\n\n\n\n\n\n# We can use Tmap for more elaborate maps\n# We can switch between plot mode and view mode \n# tmap_mode(mode = c(\"plot\", \"view\"))\n\ntmap_mode(mode = c(\"plot\"))\n\ntm_shape(watershed) + \ntm_polygons() + \ntm_shape(svalbard) +\ntm_polygons(col = \"beige\") +\ntm_graticules() +\ntm_shape(watershed) + \ntm_polygons(col = \"name\", title='Watershed') + \ntm_shape(water_f)+\ntm_fill(col = \"blue\") + \ntm_shape(stations) + \ntm_dots(size = 0.25) + \ntm_scale_bar(breaks = c(0, 10, 20)) +\ntm_compass(position = c(\"left\", \"top\")) +\ntm_layout(bg.color = \"lightblue\")\n\n\n\n\n\n\n2.2.2 Preparing the vector data to match coodinate systems and extents\n\n#Change coordinate systems of NP files to match watershed file\nriver_projected = st_transform(water_f, \"EPSG:32633\")\nriverline_projected = st_transform(water_l, \"EPSG:32633\")\nglacier_projected = st_transform(glacier, \"EPSG:32633\")\nstations_projected = st_transform(stations, \"EPSG:32633\")\n\n\n#Clip the NP files to the extent of the watersheds\nglacier_shed <- st_intersection(glacier_projected, watershed)\nriver_shed <- st_intersection(river_projected, watershed)\nriverline_shed <- st_intersection(riverline_projected, watershed)"
  },
  {
    "objectID": "spatial_analysis.html#generating-new-data-layers-from-existing-data",
    "href": "spatial_analysis.html#generating-new-data-layers-from-existing-data",
    "title": "2  Spatial Analysis",
    "section": "2.3 Generating new data layers from existing data",
    "text": "2.3 Generating new data layers from existing data\n\n2.3.1 Distance to rivers\n\n## For the next operation we are working in the old sf/raster formats so we need to convert them first\n# Change sf file format to sp file format\nwatershed_sp <- sf:::as_Spatial(watershed$geometry)\nstation_sp <- sf:::as_Spatial(stations_projected$geometry)\n\n\n\n2.3.2 Calculate the distance to each sampling station\n\n## Because we want the distance to a specific but not any station we need to split the watersheds first \n\n# Ebbaelva\n\n#Subset the dataset to \"Ebbaelva\" only\nwatershed_sub = subset(watershed, name == \"Ebbaelva\") \nstation_sub = subset(stations_projected, Station == \"Ebbaelva\") \n\n#This part is the same for each watershed, so I am using general names so that the code doesn't change\n#In other words, this part would be smart to be put in a loop.\n\n#Restore the spatial properties\nwatershed_sub_sp <- sf:::as_Spatial(watershed_sub$geometry)\nstation_sp <- sf:::as_Spatial(station_sub$geometry)\n\n#Make a raster of the extent of the watershed\nr <- raster(extent(watershed_sub_sp),res=30)\n\n#Convert the raster into points (one for each raster cell)\np = as(r,\"SpatialPoints\")\n\n#For each point calculate the distances to streams)\nd = gDistance(p, station_sp, byid=TRUE)\n\n#Calculate the shortest distance for each point and add the result to the empty raster\nr[] <- apply(d,2,min)\n\n#Convert the raster layer to SpatRast format and define the coordinate system\nr <- rast(r)\ncrs(r)  <- \"EPSG:32633\"\n\n#Crop the distance t the extent of the watershed\nr_crop <- crop(r, vect(watershed_sub))\nr <- mask(r, vect(watershed_sub))\n\n#Name the raster file Ebbaelva\nEbbaelva <- r\n\n##Now we can repeat this process for all the watersheds\n\n#Gipsdalselva\nwatershed_sub <- subset(watershed, name == \"Gipsdalselva\") \nstation_sub <- subset(stations_projected, Station == \"Gipsdalselva\") \n\nwatershed_sub_sp <- sf:::as_Spatial(watershed_sub$geometry)\nstation_sp <- sf:::as_Spatial(station_sub$geometry)\n\nr<-raster(extent(watershed_sub_sp),res=30)\n#Convert the raster into points (one for each raster cell)\np = as(r,\"SpatialPoints\")\n\n#For each point calculate the distances to streams)\nd = gDistance(p, station_sp, byid=TRUE)\n\n#Calculate the shortest distance for each point and add the result to the empty raster\nr[] = apply(d,2,min)\n\n#Convert the raster layer to SpatRast format and define the coordinate system\nr <- rast(r)\ncrs(r) <- \"EPSG:32633\"\n\nr_crop <- crop(r, vect(watershed_sub))\nr <- mask(r, vect(watershed_sub))\n\nGipsdalselva <- r\n\n#DeGeerelva\nwatershed_sub = subset(watershed, name == \"DeGeerelva\") \nstation_sub = subset(stations_projected, Station == \"DeGeerelva\") \n\nwatershed_sub_sp <- sf:::as_Spatial(watershed_sub$geometry)\nstation_sp <- sf:::as_Spatial(station_sub$geometry)\n\nr <- raster(extent(watershed_sub_sp),res=30)\n#Convert the raster into points (one for each raster cell)\np = as(r,\"SpatialPoints\")\n\n#For each point calculate the distances to streams)\nd = gDistance(p, station_sp, byid=TRUE)\n\n#Calculate the shortest distance for each point and add the result to the empty raster\nr[] = apply(d,2,min)\n\n#Convert the raster layer to SpatRast format and define the coordinate system\nr<-rast(r)\ncrs(r)  <- \"EPSG:32633\"\n\nr_crop <- crop(r, vect(watershed_sub))\nr <- mask(r, vect(watershed_sub))\n\nDeGeerelva<-r\n\n# Sassenelva\nwatershed_sub = subset(watershed, name == \"Sassenelva\") \nstation_sub = subset(stations_projected, Station == \"Sassenelva\") \n\nwatershed_sub_sp <- sf:::as_Spatial(watershed_sub$geometry)\nstation_sp <- sf:::as_Spatial(station_sub$geometry)\n\nr<-raster(extent(watershed_sub_sp),res=30)\n#Convert the raster into points (one for each raster cell)\np = as(r,\"SpatialPoints\")\n\n#For each point calculate the distances to streams)\nd = gDistance(p, station_sp, byid = TRUE)\n\n#Calculate the shortest distance for each point and add the result to the empty raster\nr[] = apply(d,2,min)\n\n#Convert the raster layer to SpatRast format and define the coordinate system\nr<-rast(r)\ncrs(r)  <- \"EPSG:32633\"\n\nr_crop <- crop(r, vect(watershed_sub))\nr <- mask(r, vect(watershed_sub))\n\nSassenelva <- r\n\n# Adventelva\nwatershed_sub = subset(watershed, name == \"Adventelva\") \nstation_sub = subset(stations_projected, Station == \"Adventelva\") \n\nwatershed_sub_sp <- sf:::as_Spatial(watershed_sub$geometry)\nstation_sp <- sf:::as_Spatial(station_sub$geometry)\n\nr<-raster(extent(watershed_sub_sp),res=30)\n#Convert the raster into points (one for each raster cell)\np = as(r,\"SpatialPoints\")\n\n#For each point calculate the distances to streams)\nd = gDistance(p, station_sp, byid=TRUE)\n\n#Calculate the shortest distance for each point and add the result to the empty raster\nr[] = apply(d,2,min)\n\n#Convert the raster layer to SpatRast format and define the coordinate system\nr<-rast(r)\ncrs(r)  <- \"EPSG:32633\"\n\nr_crop <- crop(r, vect(watershed_sub))\nr <- mask(r, vect(watershed_sub))\n\nAdventelva <- r\n\n#As the final step, we merge the 5 distance rasters\nElva <- merge(Gipsdalselva, Ebbaelva, DeGeerelva,Sassenelva,Adventelva)\n#And we give the merged raster a name (otherwise it will get the name \"layer\" when we stack them later)\nnames(Elva)[1] <- \"Elva\"\n\n# Look at the result\nplot(Elva)\nplot(st_geometry(watershed), add=TRUE)\n\n\n\n\n\n\n2.3.3 Creating a buffer zone around the riverlines shapefile\n\n#We can make a buffer at 50m distance\n\n#We make the buffer of 50 meters around the lines\nbuffer50 <- st_buffer(riverline_shed, dist = 50)\n\n#We vectorize the buffer\nv50 <- vect(buffer50)\n\n##Now we turn the buffer into a raster layer\n#We make an empty raster with the extent of the buffer shapefile and resolution of 10 meters\nr50 <- rast(v50,res=10)\n\n#We rasterize the buffer\nz50 <- rasterize(v50, r50, \"name\")\n\n#We give the buffer a unique name\nnames(z50)[1] <- \"buff50\""
  },
  {
    "objectID": "spatial_analysis.html#extracting-terrain-properties-from-raster-files",
    "href": "spatial_analysis.html#extracting-terrain-properties-from-raster-files",
    "title": "2  Spatial Analysis",
    "section": "2.4 Extracting terrain properties from Raster files",
    "text": "2.4 Extracting terrain properties from Raster files\n\n2.4.1 Slope\n\n#Crop the DEM to the extent of the watersheds to speed up processing\ndem_crop <- crop(dem, vect(watershed))\ndem_crop <- mask(dem_crop, vect(watershed))\n\n#Calculate slope from the DEM\nslope <- terrain(dem_crop, v = \"slope\", neighbors = 8, unit = \"degrees\")\n\n\n\n2.4.2 NDVI\n\n## NDVI\nndvi\n\nclass       : SpatRaster \ndimensions  : 1806, 1162, 1  (nrow, ncol, nlyr)\nresolution  : 231.6564, 231.6564  (x, y)\nextent      : 395709.3, 664894, 8477909, 8896281  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 33N (EPSG:32633) \nsource      : i_NDVI_average2000_2014.tif \nname        : i_NDVI_average2000_2014 \nmin value   :               -664.0667 \nmax value   :                   919.6 \n\n#Change the range to be between -1 and 1\nndvi <- ndvi/1000\n\n\n\n2.4.3 Reclassify the vegetation class\n\n# We can plot the map to look at it\nplot(veg_map)\n\n\n\n# We define a reclassification matrix to group some of the classes into broader ones\nm <- c(6, 5,\n       8, 7,\n       9, 7,\n       10, 7,\n       11, 7,\n       12, 7,\n       13, 7,\n       14,7,\n       15,7,\n       16,7,\n       17,6,\n       18,6,\n       19,6,\n       20,6,\n       21,5,\n       22,6\n)\n\n#Reclassify the map with help of the matrix\nrclmat <- matrix(m, ncol=2, byrow=TRUE)\nveg_rcl <- classify(veg_map, rclmat, include.lowest=TRUE)\n\n#Now we can look at the results\nplot(veg_rcl)"
  },
  {
    "objectID": "spatial_analysis.html#overlaying-raster-files",
    "href": "spatial_analysis.html#overlaying-raster-files",
    "title": "2  Spatial Analysis",
    "section": "2.5 Overlaying raster files",
    "text": "2.5 Overlaying raster files\n\n2.5.1 Preparing the overlay\n\n#Crop the reclassified map to the extend of the watershed to reduce file sizes\nveg_crop <- crop(veg_rcl, vect(watershed))\nveg_crop <- mask(veg_crop, vect(watershed))\n\n#Project the raster files to vegetation classes map, this is necessary for overlays\nndvi_prj <- project(ndvi, veg_crop)\ndem_prj <- project(dem_crop, veg_crop)\nslope_prj <- project(slope, veg_crop)\nbuffer50_prj <- project(z50, veg_crop)\nstation_distance <- project(Elva, veg_crop)\n\n\n\n2.5.2 Exploring the raster data\n\n#Explore the raster layers\ntmap_mode(mode = c(\"view\"))\n\ncls<-c(\"blue\", \"lightblue\", \"#ffffff80\")\n\ntmap_options(check.and.fix = TRUE) \n  \ntm_shape(dem_prj) + \n  tm_raster(style = \"cont\", \n            title = \"elevation (m a.s.l)\",\n            palette = \"-Spectral\", alpha = 0.4) +\ntm_shape(slope_prj) +\n  tm_raster(alpha = 0.4, title='Slope - degrees') +\n  tm_shape(station_distance) +\n  tm_raster(style = \"fixed\", breaks = c(0,1000,5000,40000), palette=cls,  title='Distance to Station') +\ntm_shape(watershed) +\n  tm_borders() +\ntm_shape(stations) +\n  tm_dots()\n\n\n\n\n\n\n\n\n2.5.3 Overlay files and extract as dataframe\n\n#We stack all the layers on top of each other\nstack <- c(veg_crop, ndvi_prj, dem_prj, slope_prj, buffer50_prj, station_distance)\n\n#We extract all the stacked data for each watershed, this produces a long table with a row for each column\nwatershed_df <- terra::extract(stack, vect(watershed)) \n\n\n\n2.5.4 Cleaning the dataframe\n\n# We select the columsn we are interested in and rename them\nwatershed_df <- dplyr::select(watershed_df, watershed = ID, vegetation = i_vegetation, \n                              ndvi = i_NDVI_average2000_2014, elevation = dem_svalbard_center, \n                              slope, station_distance = Elva, river_buffer50 = buff50)\n\n# Rename watersheds\nwatershed_df <- mutate(watershed_df,\n                     watershed = case_when(\n                       watershed == 1 ~ 'Ebbaelva',\n                       watershed == 2 ~ 'Gipsdalselva',\n                       watershed == 3 ~ 'DeGeerelva',\n                       watershed == 4 ~ 'Sassenelva',\n                       watershed == 5 ~ 'Adventelva'))\n\n# Rename vegetation classes\nwatershed_df <- mutate(watershed_df,\n                     vegetation = case_when(\n                       vegetation == 1 ~ 'marine',\n                       vegetation == 2 ~ 'freshwater',\n                       vegetation == 3 ~ 'shadow',\n                       vegetation == 4 ~ 'glacier',\n                       vegetation == 5 ~ 'barren',\n                       vegetation == 6 ~ 'heath',\n                       vegetation == 7 ~ 'moss'))\n\n\n# recode to 1 for pixels that are within the buffer zone\nwatershed_df <- mutate(watershed_df, river_buffer50 = ifelse(grepl (\"elva\", river_buffer50), \"1\", river_buffer50))\n\n# Change vegetation classes to factors\nwatershed_df$vegetation<-as.factor(watershed_df$vegetation)\n\n# Change NaN to NA\nwatershed_df$slope[is.nan(watershed_df$slope)] <- NA\nwatershed_df$elevation[is.nan(watershed_df$elevation)] <- NA\n\n\n# We can save the file (this will take some time)\nwrite_csv(watershed_df, file = \"datafiles/spatial_data/watershed_dataframe.csv\")"
  },
  {
    "objectID": "spatial_analysis.html#calculate-area-of-vector-based-data-glaciers-and-watershed",
    "href": "spatial_analysis.html#calculate-area-of-vector-based-data-glaciers-and-watershed",
    "title": "2  Spatial Analysis",
    "section": "2.6 Calculate % area of vector based data (glaciers and watershed)",
    "text": "2.6 Calculate % area of vector based data (glaciers and watershed)\n\n2.6.1 Calculate areas\n\n#Calculate areas of watersheds\nwatershed$watershed_area <- set_units(st_area(watershed), \"km2\")\n\n#Calculate the area of the glaciers within the watersheds\nglacier_shed$glacier_area <- st_area(glacier_shed$geometry)\n\n\n\n2.6.2 Summarize the results\n\n#Summarize the results for each watershed\nglacier_sum <- glacier_shed %>%\n  group_by(name) %>% \n  summarise(glacier_area = sum(glacier_area))\n\n#Change units to km2 to match the watershed size\nglacier_sum$glacier_area <- set_units(st_area(glacier_sum), \"km2\")\n\n#Remove the spatial information\nglacier_df = st_drop_geometry(glacier_sum)\nwatershed_df1 = st_drop_geometry(watershed)\n\n#Join watershed and glacier dataframes\nwatershed_info <- inner_join(watershed_df1, glacier_df)\n\n#Calculate % glacier within each watershed\nwatershed_info$glacier_percent <- (watershed_info$glacier_area/watershed_info$watershed_area)*100\n\n#Change the percentage/km2 to numeric format\nwatershed_info$watershed_area <- as.numeric(watershed_info$watershed_area)\nwatershed_info$glacier_area <- as.numeric(watershed_info$glacier_area)\nwatershed_info$glacier_percent <- as.numeric(watershed_info$glacier_percent)\n\n#Select and rename columns that are interesting to keep\nwatershed_info <- dplyr::select(watershed_info, watershed = name, watershed_km2 = watershed_area, glacier_km2 = glacier_area, glacier_percent)\n\n#Save the file if you want to\nwrite_csv(watershed_info, file = \"Datafiles/spatial_data/watershed_info.csv\")"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Coch, Caroline, Scott F Lamoureux, Christian Knoblauch, Isabell\nEischeid, Michael Fritz, Jaroslav Obu, and Hugues Lantuit. 2018.\n“Summer Rainfall Dissolved Organic Carbon, Solute, and Sediment\nFluxes in a Small Arctic Coastal Catchment on Herschel Island (Yukon\nTerritory, Canada).” Arctic Science 4 (4): 750–80.\n\n\nGiesbrecht, Ian JW, Suzanne E Tank, Gordon W Frazer, Eran Hood, Santiago\nG Gonzalez Arriola, David E Butman, David V D’Amore, David Hutchinson,\nAllison Bidlack, and Ken P Lertzman. 2022. “Watershed\nClassification Predicts Streamflow Regime and Organic Carbon Dynamics in\nthe Northeast Pacific Coastal Temperate Rainforest.” Global\nBiogeochemical Cycles 36 (2): e2021GB007047.\n\n\nHalbach, Laura, Mikko Vihtakari, Pedro Duarte, Alistair Everett, Mats A\nGranskog, Haakon Hop, Hanna M Kauko, et al. 2019. “Tidewater\nGlaciers and Bedrock Characteristics Control the Phytoplankton Growth\nEnvironment in a Fjord in the Arctic.” Frontiers in Marine\nScience 6: 254.\n\n\nHuser, Brian J, Martyn N Futter, Daniel Bogan, John E Brittain, Joseph M\nCulp, Willem Goedkoop, Iliada Gribovskaya, et al. 2022. “Spatial\nand Temporal Variation in Arctic Freshwater Chemistry—Reflecting\nClimate-Induced Landscape Alterations and a Changing Template for\nBiodiversity.” Freshwater Biology 67 (1): 14–29.\n\n\nMcGovern, Maeve, Alexey K Pavlov, Anne Deininger, Mats A Granskog, Eva\nLeu, Janne E Søreide, and Amanda E Poste. 2020. “Terrestrial\nInputs Drive Seasonality in Organic Matter and Nutrient Biogeochemistry\nin a High Arctic Fjord System (Isfjorden, Svalbard).”\nFrontiers in Marine Science 7: 542563.\n\n\nShiklomanov, Alexander, Stephen Déry, Mikhail Tretiakov, Daqing Yang,\nDmitry Magritsky, Alex Georgiadi, and Wenqing Tang. 2021. “River\nFreshwater Flux to the Arctic Ocean.” In Arctic Hydrology,\nPermafrost and Ecosystems, 703–38. Springer.\n\n\nWrona, Frederick J, Margareta Johansson, Joseph M Culp, Alan Jenkins,\nJohanna Mård, Isla H Myers-Smith, Terry D Prowse, Warwick F Vincent, and\nPhilip A Wookey. 2016. “Transitions in Arctic Ecosystems:\nEcological Implications of a Changing Hydrological Regime.”\nJournal of Geophysical Research: Biogeosciences 121 (3):\n650–74."
  },
  {
    "objectID": "catchment_comparison.html#exploring-the-watershed-dataframe",
    "href": "catchment_comparison.html#exploring-the-watershed-dataframe",
    "title": "3  Catchment Comparison",
    "section": "3.1 Exploring the watershed dataframe",
    "text": "3.1 Exploring the watershed dataframe\n\n3.1.1 Preparing the data\n\n# ggplots\n\n# Load the watershed files\nwatershed_df <- read_csv(\"datafiles/spatial_data/watershed_dataframe.csv\")\nwatershed_info <- read_csv(\"datafiles/spatial_data/watershed_info.csv\")\n\n# We add a column to watershed_df because it makes summaries easier\nwatershed_df$count<-1\n\n#If your computer is slow, you can randomly subset the data\nwatershed_df_sub<-sample_n(watershed_df, 10000)\n\n\n\n3.1.2 Plotting the data in GGPLOT2\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=watershed, y = elevation))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=watershed, y = ndvi))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=watershed, y = ndvi, color=vegetation))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=vegetation, y = ndvi, color=watershed))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=vegetation, y = ndvi, fill=watershed))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=vegetation, y = ndvi, fill=watershed))+\ntheme(strip.background = element_rect(colour=\"black\", fill=\"white\", \n                                      size=.5, linetype=\"solid\"))+\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n        panel.background = element_blank(), axis.line = element_line(colour = \"black\"), legend.position=\"bottom\")"
  },
  {
    "objectID": "catchment_comparison.html#summarizing-the-watersheds-dataframe",
    "href": "catchment_comparison.html#summarizing-the-watersheds-dataframe",
    "title": "3  Catchment Comparison",
    "section": "3.2 Summarizing the watersheds dataframe",
    "text": "3.2 Summarizing the watersheds dataframe\n\n3.2.1 Summarizing the continious variables\n\n#Calculate the mean ndvi, elevation and slope for each catchment\nwatershed_mean<-watershed_df %>%\n  group_by(watershed) %>% \n  summarise_at(c(\"ndvi\", \"elevation\", \"slope\"), mean, na.rm = TRUE)\n\n#Calculate the mean ndvi, elevation and slope for each catchment within 1km\nwatershed_mean<-watershed_df %>%\n  filter(station_distance < 1000) %>%\n  group_by(watershed) %>% \n  summarise_at(c(ndvi_1km=\"ndvi\", elevation_1km=\"elevation\", slope_1km=\"slope\"), mean, na.rm = TRUE) %>%\n  inner_join(watershed_mean)\n\n#Calculate the mean ndvi, elevation and slope for each catchment within 5km\nwatershed_mean<-watershed_df %>%\n  filter(station_distance < 5000) %>%\n  group_by(watershed) %>% \n  summarise_at(c(ndvi_5km=\"ndvi\", elevation_5km=\"elevation\", slope_5km=\"slope\"), mean, na.rm = TRUE) %>%\n  inner_join(watershed_mean)\n\n\n\n3.2.2 Summarizing the ground cover classes\n\n#Count each ground cover class for each watershed and pivot the table\nwatershed_class_proportion<-watershed_df %>%\n  group_by(watershed, vegetation) %>% \n  summarise_at(c(\"count\"), sum, na.rm = TRUE) %>% \n  pivot_wider(\n            names_from = 'vegetation',\n            values_from = 'count')\n\n#Calculate the percentages per vegetation class and watershed\nwatershed_class_proportion<-watershed_class_proportion %>% mutate(total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>% \n  ungroup() %>% \n  mutate(across(where(is.numeric), ~ . / total*100))\n\n#Drop the columns that we don't need\nwatershed_class_proportion<-watershed_class_proportion %>% dplyr::select(-shadow, -marine, -total)\n\n\n\n3.2.3 Exploring the ground cover classes\n\n#Change to long format for ground cover classes to be factors\nwatershed_class_proportion_pivot<-pivot_longer(watershed_class_proportion,\n            cols = -watershed,\n            names_to = 'class',\n            values_to = 'percentage')\n\n#Plot the data with GGPLOT\nggplot(data=watershed_class_proportion_pivot, aes(x=watershed, y=percentage, fill=class)) +\n  geom_bar(stat=\"identity\")\n\n\n\n#Change the axis and from stacked to parallel\nggplot(data=watershed_class_proportion_pivot, aes(x=class, y=percentage, fill=watershed)) +\n  geom_bar(stat=\"identity\", color=\"black\", position=position_dodge())\n\n\n\n\n\n\n3.2.4 Calculate the percentage bare ground within 50m of the river\n\n#Sum the vegetation classes per watershed\nbuffer50_class_proportion<-watershed_df %>%\n  filter(river_buffer50 == \"1\") %>% \n  group_by(watershed, vegetation) %>% \n  summarise_at(c(\"count\"), sum, na.rm = TRUE) %>% \n  pivot_wider(\n    names_from = 'vegetation',\n    values_from = 'count')\n\n#Calculate the percentages per vegetation class and watershed\nbuffer50_class_proportion<-buffer50_class_proportion %>% mutate(total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>% \n  ungroup() %>% \n  mutate(across(where(is.numeric), ~ . / total*100))\n\n#Drop the columns that we don't need and join with existing dataset\nbuffer50_bareground<-buffer50_class_proportion %>% dplyr::select(watershed, barren50meter=barren) %>% \n  inner_join(watershed_class_proportion)\n\n\n\n3.2.5 Join tables and export\n\n#Use join to join the continious and categorical data into 1\nwatershed_info_joined <- inner_join(watershed_class_proportion, watershed_mean)\nwatershed_info_joined <- inner_join(watershed_info_joined, buffer50_bareground)\nwatershed_info_joined <- inner_join(watershed_info_joined, watershed_info)\n\nwrite_csv(watershed_info_joined, \"datafiles/spatial_data/watershed_info_joined.csv\")"
  },
  {
    "objectID": "watershed_comparison.html",
    "href": "watershed_comparison.html",
    "title": "3  Watershed Comparison",
    "section": "",
    "text": "Now, we will combine data on catchment characteristics and river water chemistry to investigate differences among the 5 study catchments."
  },
  {
    "objectID": "watershed_comparison.html#exploring-the-watershed-dataframe",
    "href": "watershed_comparison.html#exploring-the-watershed-dataframe",
    "title": "3  Watershed Comparison",
    "section": "3.1 Exploring the watershed dataframe",
    "text": "3.1 Exploring the watershed dataframe\n\n3.1.1 Preparing the data\n\n# ggplots\n\n# Load the watershed files\nwatershed_df <- read_csv(\"datafiles/spatial_data/watershed_dataframe.csv\")\nwatershed_info <- read_csv(\"datafiles/spatial_data/watershed_info.csv\")\n\n# We add a column to watershed_df because it makes summaries easier\nwatershed_df$count<-1\n\n#If your computer is slow, you can randomly subset the data\nwatershed_df_sub<-sample_n(watershed_df, 10000)\n\n\n\n3.1.2 Plotting the data in GGPLOT2\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=watershed, y = elevation))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=watershed, y = ndvi))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=watershed, y = ndvi, color=vegetation))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=vegetation, y = ndvi, color=watershed))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=vegetation, y = ndvi, fill=watershed))\n\n\n\nggplot()+\n  geom_boxplot(data = watershed_df_sub, aes(x=vegetation, y = ndvi, fill=watershed))+\ntheme(strip.background = element_rect(colour=\"black\", fill=\"white\", \n                                      size=.5, linetype=\"solid\"))+\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n        panel.background = element_blank(), axis.line = element_line(colour = \"black\"), legend.position=\"bottom\")"
  },
  {
    "objectID": "watershed_comparison.html#summarizing-the-watersheds-dataframe",
    "href": "watershed_comparison.html#summarizing-the-watersheds-dataframe",
    "title": "3  Watershed Comparison",
    "section": "3.2 Summarizing the watersheds dataframe",
    "text": "3.2 Summarizing the watersheds dataframe\n\n3.2.1 Summarizing the continious variables\n\n#Calculate the mean ndvi, elevation and slope for each catchment\nwatershed_mean<-watershed_df %>%\n  group_by(watershed) %>% \n  summarise_at(c(\"ndvi\", \"elevation\", \"slope\"), mean, na.rm = TRUE)\n\n#Calculate the mean ndvi, elevation and slope for each catchment within 1km\nwatershed_mean<-watershed_df %>%\n  filter(station_distance < 1000) %>%\n  group_by(watershed) %>% \n  summarise_at(c(ndvi_1km=\"ndvi\", elevation_1km=\"elevation\", slope_1km=\"slope\"), mean, na.rm = TRUE) %>%\n  inner_join(watershed_mean)\n\n#Calculate the mean ndvi, elevation and slope for each catchment within 5km\nwatershed_mean<-watershed_df %>%\n  filter(station_distance < 5000) %>%\n  group_by(watershed) %>% \n  summarise_at(c(ndvi_5km=\"ndvi\", elevation_5km=\"elevation\", slope_5km=\"slope\"), mean, na.rm = TRUE) %>%\n  inner_join(watershed_mean)\n\n\n\n3.2.2 Summarizing the ground cover classes\n\n#Count each ground cover class for each watershed and pivot the table\nwatershed_class_proportion<-watershed_df %>%\n  group_by(watershed, vegetation) %>% \n  summarise_at(c(\"count\"), sum, na.rm = TRUE) %>% \n  pivot_wider(\n            names_from = 'vegetation',\n            values_from = 'count')\n\n#Calculate the percentages per vegetation class and watershed\nwatershed_class_proportion<-watershed_class_proportion %>% mutate(total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>% \n  ungroup() %>% \n  mutate(across(where(is.numeric), ~ . / total*100))\n\n#Drop the columns that we don't need\nwatershed_class_proportion<-watershed_class_proportion %>% dplyr::select(-shadow, -marine, -total)\n\n\n\n3.2.3 Exploring the ground cover classes\n\n#Change to long format for ground cover classes to be factors\nwatershed_class_proportion_pivot<-pivot_longer(watershed_class_proportion,\n            cols = -watershed,\n            names_to = 'class',\n            values_to = 'percentage')\n\n#Plot the data with GGPLOT\nggplot(data = watershed_class_proportion_pivot, aes(x = watershed, y = percentage, fill = class)) +\n  geom_bar(stat=\"identity\")\n\n\n\n#Change the axis and from stacked to parallel\nggplot(data = watershed_class_proportion_pivot, aes(x = class, y = percentage, fill = watershed)) +\n  geom_bar(stat=\"identity\", color=\"black\", position = position_dodge())\n\n\n\n\n\n\n3.2.4 Calculate the percentage bare ground within 50m of the river\n\n#Sum the vegetation classes per watershed\nbuffer50_class_proportion <- watershed_df %>%\n  filter(river_buffer50 == \"1\") %>% \n  group_by(watershed, vegetation) %>% \n  summarise_at(c(\"count\"), sum, na.rm = TRUE) %>% \n  pivot_wider(\n    names_from = 'vegetation',\n    values_from = 'count')\n\n#Calculate the percentages per vegetation class and watershed\nbuffer50_class_proportion <- buffer50_class_proportion %>% mutate(total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>% \n  ungroup() %>% \n  mutate(across(where(is.numeric), ~ . / total*100))\n\n#Drop the columns that we don't need and join with existing dataset\nbuffer50_bareground<-buffer50_class_proportion %>% dplyr::select(watershed, barren50meter=barren) %>% \n  inner_join(watershed_class_proportion)\n\n\n\n3.2.5 Join tables and export\n\n#Use join to join the continious and categorical data into 1\nwatershed_info_joined <- inner_join(watershed_class_proportion, watershed_mean)\nwatershed_info_joined <- inner_join(watershed_info_joined, buffer50_bareground)\nwatershed_info_joined <- inner_join(watershed_info_joined, watershed_info)\n\nwrite_csv(watershed_info_joined, \"datafiles/spatial_data/watershed_info_joined.csv\")"
  },
  {
    "objectID": "watershed_comparison.html#relationships-to-river-water-chemistry",
    "href": "watershed_comparison.html#relationships-to-river-water-chemistry",
    "title": "3  Watershed Comparison",
    "section": "3.3 Relationships to river water chemistry",
    "text": "3.3 Relationships to river water chemistry\n\nwatershed_info_joined <- read_csv(\"datafiles/spatial_data/watershed_info_joined.csv\") \n\n\n3.3.1 PCA\n\n# PCA of water chemistry \nwater_chem2 <- water_chem %>% rename(\"watershed\" = \"River\") %>% \n  mutate(watershed = str_replace_all(watershed, \"Degeerelva\", \"DeGeerelva\"))\n\n# Dataset for calculating PCA\nEnvar <- water_chem2 %>% \n  dplyr::select(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)) %>% \n  mutate_at(vars(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)),~scale(.))\n\nEnvar2 <- water_chem2 %>% \n  dplyr::select(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg))\nEnvar <- scale(Envar2)\n\n# PCA in Vegan\nwater_chem_PCA <- rda(Envar)\nwater_chem_PCA\n\nCall: rda(X = Envar)\n\n              Inertia Rank\nTotal               8     \nUnconstrained       8    8\nInertia is variance \n\nEigenvalues for unconstrained axes:\n   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 \n3.1505 2.1688 1.1928 0.5890 0.4575 0.2103 0.1660 0.0651 \n\n(3.1505/8)*100\n\n[1] 39.38125\n\n(2.1688/8)*100\n\n[1] 27.11\n\n# Plot\nPCAscores <- scores(water_chem_PCA, display = \"sites\") %>% as.data.frame() \nPCAvect <- scores(water_chem_PCA, display = \"species\") %>% as.data.frame() %>% rownames_to_column(\"species\")\n\nfit_envar <- envfit(water_chem_PCA, Envar2, perm = 999, na.rm = T) %>% \n  scores(., display = \"vectors\") %>% \n  as.data.frame() %>% \n  rownames_to_column(\"species\")\n\n#Plot\nPlot_PCA <- ggplot() +\n  geom_point(data = PCAscores, aes(x = PC1, y = PC2, color = water_chem2$month, shape = water_chem2$watershed), size= 3, alpha = 0.7) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) + \n  theme_classic() +\n  geom_vline(xintercept = c(0), color = \"grey70\", linetype = 2) + \n  geom_hline(yintercept = c(0), color = \"grey70\", linetype = 2) +\n  labs(x = \"PC1 (39 %)\", y = \"PC2 (27 %)\") + \n  #stat_ellipse(data = PCAscores, aes(x = PC1, y = PC2, fill = factor(water_chem2$watershed)), \n             #  geom=\"polygon\", level=0.8, alpha=0.2) +\n  geom_segment(data = fit_envar, aes(x = 0, xend = PC1, y = 0, yend = PC2), \n               arrow = arrow(length = unit(0.1, \"cm\")), col = \"gray45\") +\n  geom_text_repel(data = fit_envar, aes(x = PC1, y= PC2, label = species), \n                  parse = T, col=\"gray45\", size = 5, segment.size = 0.15) +\n    theme(text = element_text(size = 15),legend.text = element_text(size=rel(0.6)), legend.title = element_blank(), \n        panel.background = element_rect(colour = \"black\", size=1)) + \n  ylim(-1.5, 1.5) + xlim(-1.5, 1.5) \n\nPlot_PCA\n\n\n\n\n\n\n3.3.2 Link watershed characteristics\n\n# PCA of water chemistry and watershed characteristics\n\nwatershed_chem <- full_join(water_chem2, watershed_info_joined) %>% \n  dplyr::select(c(glacier:glacier_percent))\n  \n# PCA of water chemistry \nwater_chem2 <- water_chem %>% rename(\"watershed\" = \"River\") %>% \n  mutate(watershed = str_replace_all(watershed, \"Degeerelva\", \"DeGeerelva\"))\n\n# Dataset for calculating PCA\nEnvar <- water_chem2 %>% \n  dplyr::select(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)) %>% \n  mutate_at(vars(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg)),~scale(.))\n\nEnvar2 <- water_chem2 %>% \n  dplyr::select(c(DOC, POC, NO2_NO3, PO4, SiO2, SPM, dTotHg, pTotHg))\nEnvar <- scale(Envar2)\n\n# PCA in Vegan\nwater_chem_PCA <- rda(Envar)\nwater_chem_PCA\n\nCall: rda(X = Envar)\n\n              Inertia Rank\nTotal               8     \nUnconstrained       8    8\nInertia is variance \n\nEigenvalues for unconstrained axes:\n   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 \n3.1505 2.1688 1.1928 0.5890 0.4575 0.2103 0.1660 0.0651 \n\n(3.1505/8)*100\n\n[1] 39.38125\n\n(2.1688/8)*100\n\n[1] 27.11\n\n# Plot\nPCAscores <- scores(water_chem_PCA, display = \"sites\") %>% as.data.frame() \nPCAvect <- scores(water_chem_PCA, display = \"species\") %>% as.data.frame() %>% rownames_to_column(\"species\")\n\n# Watershed data\nfit_watershed <- envfit(water_chem_PCA, watershed_chem, perm = 999, na.rm = T) %>% \n  scores(., display = \"vectors\") %>% \n  as.data.frame() %>% \n  rownames_to_column(\"species\")\n\n#Plot\nPlot_PCA <- ggplot() +\n  geom_point(data = PCAscores, aes(x = PC1, y = PC2, color = water_chem2$month, shape = water_chem2$watershed), size= 3, alpha = 0.7) +\n  scale_color_manual(values=c(\"cadetblue3\", \"cadetblue4\", \"darksalmon\",  \"plum4\")) + \n  theme_classic() +\n  geom_vline(xintercept = c(0), color = \"grey70\", linetype = 2) + \n  geom_hline(yintercept = c(0), color = \"grey70\", linetype = 2) +\n  labs(x = \"PC1 (39 %)\", y = \"PC2 (27 %)\") + \n  #stat_ellipse(data = PCAscores, aes(x = PC1, y = PC2, fill = factor(water_chem2$watershed)), \n             #  geom=\"polygon\", level=0.8, alpha=0.2) +\n  geom_segment(data = fit_watershed, aes(x = 0, xend = PC1, y = 0, yend = PC2), \n               arrow = arrow(length = unit(0.1, \"cm\")), col = \"gray45\") +\n  geom_text_repel(data = fit_watershed, aes(x = PC1, y= PC2, label = species), \n                  parse = T, col=\"gray45\", size = 3.6, segment.size = 0.15) +   \n  theme(text = element_text(size = 15), legend.text = element_text(size=rel(0.6)), legend.title = element_blank(), \n        panel.background = element_rect(colour = \"black\", size=1)) + \n  ylim(-1.5,1.5) + xlim(-1.5,1.5) \n\nPlot_PCA"
  }
]